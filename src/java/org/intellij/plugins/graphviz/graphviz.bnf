/*
 * Copyright 2000-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  parserClass = 'org.intellij.plugins.graphviz.GraphvizParser'
  parserUtilClass = "org.intellij.plugins.graphviz.psi.GraphvizParserUtil"
  psiPackage = 'org.intellij.plugins.graphviz.psi'
  psiImplPackage = 'org.intellij.plugins.graphviz.psi.impl'

  elementTypeHolderClass = 'org.intellij.plugins.graphviz.GraphvizElementTypes'
  elementTypeClass = 'org.intellij.plugins.graphviz.GraphvizElementType'
  psiClassPrefix = 'Graphviz'
  psiVisitorName = 'GraphvizElementVisitor'

//  psiImplUtilClass = 'org.intellij.plugins.graphviz.psi.impl.GraphvizPsiImplUtilJ'
  tokenTypeClass = 'org.intellij.plugins.graphviz.GraphvizTokenType'

  tokens = [
//    space = "regexp:\s+"
    line_comment = "regexp:(//.*)|(#.*)"
    block_comment = "regexp:/\*([^*]|\*[^/])*\*?(\*/)?"

    L_PAREN='('
    R_PAREN=')'
    L_BRACKET='['
    R_BRACKET=']'
    L_CURLY='{'
    R_CURLY='}'


    ASGN='='
    COMMA=','
    COLON=':'
    SEMICOLON=';'
    UNDERSCORE='_'

    EDGE_DIR='->'
    EDGE_UNDIR='--'

    // Keywords
    KW_STRICT='regexp:[sS][tT][rR][iI][cC][tT]'
    KW_GRAPH='regexp:[gG][rR][aA][pP][hH]'
    KW_DIGRAPH='regexp:[dD][iI][gG][rR][aA][pP][hH]'
    KW_SUBGRAPH='regexp:[sS][uU][bB][gG][rR][aA][pP][hH]'
    KW_NODE='regexp:[nN][oO][dD][eE]'
    KW_EDGE='regexp:[eE][dD][gG][eE]'


    // Other elements
    // TODO: Return support for Unicode
    ID="regexp:[_[:letter:]][0-9_[:letter:]]*"
    // TODO: Add tailing '?' to string
    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\""
    NUMBER='regexp:-?((\d+(\.\d*)?)|(\.\d+))'
    HTML_STRING='regexp:<([^<>]*|<[^<>]*>)+>'
    PORT_ID="regexp:([NESW]{1,2})|C|_"
  ]
  extends(".*_stmt")=stmt
}

root ::= graph?
graph    ::= KW_STRICT? (KW_GRAPH | KW_DIGRAPH) identifier? stmt_list {
  methods=[
    KW_STRICT=""
    KW_GRAPH=""
    KW_DIGRAPH=""
    Statements="stmt"
  ]
}
subgraph ::= ( KW_SUBGRAPH identifier? )? stmt_list {
  extends=stmt
  implements=graph
  methods=[
    KW_SUBGRAPH=""
    Statements="stmt"
  ]
}

private stmt_list ::=  '{' (stmt ';'?)* '}' {
  pin=1
}
private attr_list ::= ('[' attribute* ']')+ {
  pin('.*')=1
}
attribute ::= identifier ('=' identifier)? ( ';' | ',' )? {
  methods=[
    identifier=""
    Key="identifier[0]"
    Value="identifier[1]"
  ]
}

stmt ::= edge_stmt
       | asgn_stmt
       | node_stmt
       | attr_stmt
       | subgraph

node_stmt ::= node_id attr_list? {
  methods=[
    Attributes="attribute"
  ]
}
attr_stmt ::= (KW_GRAPH | KW_NODE | KW_EDGE) attr_list {
  methods=[
    KW_GRAPH=""
    KW_NODE=""
    KW_EDGE=""
    Attributes="attribute"
  ]
}
edge_stmt ::= edge_operand (edge_op edge_operand)+ attr_list? {
  methods=[
    node_id=""
    subgraph=""
    edge_op=""
    Attributes="attribute"
  ]
}
private edge_operand::=(node_id | subgraph)

asgn_stmt ::= identifier '=' identifier {
  methods=[
    identifier=""
    Key="identifier[0]"
    Value="identifier[1]"
  ]
}


node_id ::= identifier port?
port ::= ':' identifier ( ':' compass_pt )?
       | ':' compass_pt


compass_pt ::= PORT_ID | ID

// Additional
edge_op ::= '->' | '--'
identifier ::= id_literal | number_literal | string_literal | html_literal
id_literal     ::= ID
number_literal ::= NUMBER
string_literal ::= DOUBLE_QUOTED_STRING
html_literal   ::= HTML_STRING
